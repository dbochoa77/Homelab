===== DIRECTORY STRUCTURE =====
.
├── allCode.txt
├── bootstrap.sh
├── flake.lock
├── flake.nix
├── home
│   ├── dbochoa77
│   │   └── default.nix
│   ├── features
│   │   └── cli
│   │       ├── alias.nix
│   │       ├── default.nix
│   │       └── fastfetch.nix
│   └── nixos
│       ├── dbochoa77.nix
│       ├── dotfiles
│       │   └── default.nix
│       └── home.nix
├── hosts
│   ├── dbochoa77
│   │   ├── default.nix
│   │   ├── extraServices
│   │   │   ├── default.nix
│   │   │   └── podman
│   │   │       └── default.nix
│   │   └── users
│   │       ├── dbochoa77.nix
│   │       └── default.nix
│   └── nixos
│       ├── configuration.nix
│       ├── default.nix
│       ├── hardware-configuration.nix
│       ├── secrets.nix
│       └── services
│           ├── boot
│           │   ├── default.nix
│           │   ├── latestKernel
│           │   │   └── default.nix
│           │   └── systemd
│           │       └── default.nix
│           ├── containers
│           │   ├── default.nix
│           │   ├── echo
│           │   │   └── default.nix
│           │   └── wireguard
│           │       └── default.nix
│           ├── default.nix
│           ├── flakes
│           │   └── default.nix
│           ├── hostname
│           │   └── default.nix
│           ├── internationisationProps
│           │   └── default.nix
│           ├── keymaps
│           │   └── default.nix
│           ├── networking
│           │   └── default.nix
│           ├── ssh
│           │   └── default.nix
│           ├── stateVersion
│           │   └── default.nix
│           ├── timezone
│           │   └── default.nix
│           ├── unfree
│           │   └── default.nix
│           └── user
│               └── default.nix
├── overlays
│   └── default.nix
├── pkgs
│   ├── default.nix
│   ├── systemPackages
│   │   ├── default.nix
│   │   ├── developerTools
│   │   │   └── default.nix
│   │   ├── nixos-tools
│   │   │   └── default.nix
│   │   ├── security
│   │   │   └── default.nix
│   │   └── utilities
│   │       └── default.nix
│   └── userPackages
│       ├── default.nix
│       ├── terminal
│       │   └── default.nix
│       └── utilities
│           └── default.nix
└── printAll.sh

40 directories, 48 files

===== FILE CONTENTS =====

===== ./allCode.txt =====

===== ./home/features/cli/fastfetch.nix =====
{
  config,
  lib,
  pkgs,
  ...
}:
with lib; let 
  cfg = config.features.cli.fastfetch;
in {
    options.features.cli.fastfetch.enable = mkEnableOption "enable fastfetch";

    config = mkIf cfg.enable {
        home.packages = with pkgs; [fastfetch];
    };
}



===== ./home/features/cli/default.nix =====
{pkgs, ...}: {
    imports = [
    ./alias.nix
    ./fastfetch.nix
    ];


  programs.eza = {
    enable = true;
    enableFishIntegration = true;
    enableBashIntegration = true;
    extraOptions = ["-l" "--icons" "--git" "-a"];
  };

  programs.bat = {enable = true;};



  home.packages = with pkgs; [
    coreutils 
    fd
    htop
    httpie
    jq
    procs
    ripgrep
    tldr
    zip 
  ];
}

===== ./home/features/cli/alias.nix =====
{
  config,
  lib,
  ...
}:

{
  programs.bash = {
    enable = true;
    shellAliases = {

      # Youtube Downloader
      yt = "yt-dlp";
      "yt.rock" = "yt-dlp -x --audio-format mp3 -o \"~/music/rock/%(title)s.%(ext)s\"";
      "yt.pop" = "yt-dlp -x --audio-format mp3 -o \"~/music/pop/%(title)s.%(ext)s\"";
      "yt.hipHop" = "yt-dlp -x --audio-format mp3 -o \"~/music/hipHop/%(title)s.%(ext)s\"";
      "yt.rnbSoul" = "yt-dlp -x --audio-format mp3 -o \"~/music/rnbSoul/%(title)s.%(ext)s\"";
      "yt.classical" = "yt-dlp -x --audio-format mp3 -o \"~/music/classical/%(title)s.%(ext)s\"";
      "yt.country" = "yt-dlp -x --audio-format mp3 -o \"~/music/country/%(title)s.%(ext)s\"";
      "yt.folk" = "yt-dlp -x --audio-format mp3 -o \"~/music/folk/%(title)s.%(ext)s\"";
      "yt.jazz" = "yt-dlp -x --audio-format mp3 -o \"~/music/jazz/%(title)s.%(ext)s\"";
      "yt.blues" = "yt-dlp -x --audio-format mp3 -o \"~/music/blues/%(title)s.%(ext)s\"";
      "yt.electronic" = "yt-dlp -x --audio-format mp3 -o \"~/music/electronic/%(title)s.%(ext)s\"";
      "yt.world" = "yt-dlp -x --audio-format mp3 -o \"~/music/world/%(title)s.%(ext)s\"";
      "yt.gospel" = "yt-dlp -x --audio-format mp3 -o \"~/music/gospel/%(title)s.%(ext)s\"";
      "yt.soundtrack" = "yt-dlp -x --audio-format mp3 -o \"~/music/soundtrack/%(title)s.%(ext)s\"";
      "yt.latin" = "yt-dlp -x --audio-format mp3 -o \"~/music/latin/%(title)s.%(ext)s\"";
      "yt.rap" = "yt-dlp -x --audio-format mp3 -o \"~/music/rap/%(title)s.%(ext)s\"";

      # MPV Shuffle Play
      "mpv.rock" = "mpv --shuffle ~/music/rock";
      "mpv.pop" = "mpv --shuffle ~/music/pop";
      "mpv.hipHop" = "mpv --shuffle ~/music/hipHop";
      "mpv.rnbSoul" = "mpv --shuffle ~/music/rnbSoul";
      "mpv.classical" = "mpv --shuffle ~/music/classical";
      "mpv.country" = "mpv --shuffle ~/music/country";
      "mpv.folk" = "mpv --shuffle ~/music/folk";
      "mpv.jazz" = "mpv --shuffle ~/music/jazz";
      "mpv.blues" = "mpv --shuffle ~/music/blues";
      "mpv.electronic" = "mpv --shuffle ~/music/electronic";
      "mpv.world" = "mpv --shuffle ~/music/world";
      "mpv.gospel" = "mpv --shuffle ~/music/gospel";
      "mpv.soundtrack" = "mpv --shuffle ~/music/soundtrack";
      "mpv.latin" = "mpv --shuffle ~/music/latin";
      "mpv.rap" = "mpv --shuffle ~/music/rap";
      "mpv.phonk" = "mpv --shuffle ~/music/phonk";

      # Brightness Control
      "bright.down" = "echo 2 | sudo tee /sys/class/backlight/acpi_video0/brightness";
      "bright.up" = "echo 15 | sudo tee /sys/class/backlight/acpi_video0/brightness";
      "bright.max" = "echo 18 | sudo tee /sys/class/backlight/acpi_video0/brightness";

      # PDF
      pdf = "mupdf";

      # Screenshots
      flameshot = "flameshot gui";

      # Basic Commands
      c = "clear";
      h = "history";
      now = "date +%T";
      grep = "rg";
      ps = "procs";
      top = "htop";
      df = "df -h";
      du = "du -sh";
      t = "tree -L 2";

      # File Listing
      ls = "eza -a --icons --git";
      la = "exa -la --icons --git";
      lt = "eza -T --git-ignore --icons";

      # Directory Movement
      mkdir = "mkdir -p";
      ".." = "cd ..";
      "..." = "cd ../../";
      "...." = "cd ../../../..";
      ".4" = "cd ../../../../";
      ".5" = "cd ../../../../../";
      exam = "cd /home/dbochoa77/work/military/USN/trainingAndReadiness/training/examPrep";
      github = "cd /home/dbochoa77/tech/github/workspace";
      hoyah = "cd /home/dbochoa77/work/military/USN";
      lifelong = "xrandr --output HDMI-1 --mode 1920x1080 --right-of eDP-1 --auto";

      # Git Shortcuts
      ga = "git add .";
      gc = "git commit -";
      gs = "git status";
 
      # Nix Config Rebuild
      rebuild = "nix flake update && sudo nixos-rebuild switch --flake .#nixos && home-manager switch --flake .#nixos"; 

      # Neovim (root)
      v = "sudo -E nvim";
    };

    initExtra = ''
      cd() {
        builtin cd "$@" && eza -a --icons --git;
      }

      fastfetch
      ls -d -- * .*
    '';
  };
}


===== ./home/dbochoa77/default.nix =====
{ config, lib, outputs, pkgs, ... }: 

{
   nixpkgs = {

    # Overlays
    overlays = [
    outputs.overlays.additions
    outputs.overlays.modifications
    outputs.overlays.stable-packages

    ];

    config = {
    allowUnfree = true;

    allowUnfreePredicate = _: true;
  };
};

  nix = {
    package = lib.mkDefault pkgs.nix;
    settings = {
      experimental-features = ["nix-command" "flakes"];
      warn-dirty = false;
    };
  };
}

===== ./home/nixos/dbochoa77.nix =====
{ config, ... }: { 
  imports = [ 
    ../dbochoa77
    ../features/cli
    ./home.nix
    ./dotfiles
  ]; 

  features = {
    cli = {
    fastfetch.enable = true;
    };
  };
}


===== ./home/nixos/dotfiles/default.nix =====
{
  inputs, 
  ...
}:

{
home.file.".config/nvim" = { 
    source = "${inputs.nvimDotfiles}/nvim";
    recursive = true;
  };
}

===== ./home/nixos/home.nix =====
{ config, lib, pkgs, ... }:

{
  home.username = lib.mkDefault "dbochoa77";
  home.homeDirectory = lib.mkDefault "/home/${config.home.username}";

  home.stateVersion = "24.05";

  home.packages = import ../../pkgs/userPackages { inherit pkgs; };

  home.file = {
  };

  home.sessionVariables = {
    EDITOR = "nvim";
  };

  programs.home-manager.enable = true;
}

===== ./flake.nix =====
{
  description = "Configuration for Nixos Server";

 inputs = {
    home-manager = {
      url = "github:nix-community/home-manager";
      inputs.nixpkgs.follows = "nixpkgs";
    };
    nixpkgs.url = "github:nixos/nixpkgs/nixos-unstable";
    nixpkgs-stable.url = "github:nixos/nixpkgs/nixos-24.05";

    #agenix.url = "github:ryantm/agenix";
    
    nvimDotfiles = {
    url = "git+https://github.com/dbochoa77/nvim.git";
    flake = false;
    };
  
    dwmDotfiles = { 
    url = "git+https://github.com/dbochoa77/dwmRepo.git";
    flake = false;
    };
  };

  outputs = { 
	self, 
        #agenix,
	dwmDotfiles,
	nvimDotfiles,
	home-manager,
	nixpkgs,
	...
    } @ inputs: let
      inherit (self) outputs;
      systems = [
        "x86_64-linux"
      ];
      forAllSystems = nixpkgs.lib.genAttrs systems;  

    in {
    #packages =
    #  forAllSystems (system: import ./pkgs { pkgs = nixpkgs.legacyPackages.${system}; }
    #);

    overlays = import ./overlays {inherit inputs;};

    nixosConfigurations = {
        nixos = nixpkgs.lib.nixosSystem {
	  specialArgs = {inherit inputs outputs;};
	  modules = [./hosts/nixos/default.nix
		     ./hosts/nixos/hardware-configuration.nix
	  ];
	};
      };
      #agenix.nixosModules.default
      #./hosts/nixos/configuration.nix was removed, working on fixing podman

      homeConfigurations = { 
        "nixos" = home-manager.lib.homeManagerConfiguration {
	  pkgs = nixpkgs.legacyPackages."x86_64-linux";
	  extraSpecialArgs = {inherit inputs outputs;};
	  modules = [./home/nixos/dbochoa77.nix];
	};
      };
    };
} 

===== ./printAll.sh =====
#!/usr/bin/env bash

# Usage: ./printAll.sh /path/to/dir output.txt

TARGET_DIR="${1:-.}"             # Default to current directory if not provided
OUTPUT_FILE="${2:-allCode.txt}"     # Default output file name

# Clear or create output file
> "$OUTPUT_FILE"

# Add directory tree structure (ignoring .git)
echo "===== DIRECTORY STRUCTURE =====" >> "$OUTPUT_FILE"
tree -I ".git" "$TARGET_DIR" >> "$OUTPUT_FILE"
echo -e "\n===== FILE CONTENTS =====" >> "$OUTPUT_FILE"

# Loop through all files except inside .git and append content
find "$TARGET_DIR" -type f ! -path "*/.git/*" | while read -r file; do
    echo -e "\n===== $file =====" >> "$OUTPUT_FILE"
    cat "$file" >> "$OUTPUT_FILE"
done

echo "✅ All contents saved to $OUTPUT_FILE"


===== ./overlays/default.nix =====
{ inputs, ... }: {
  # This one brings our custom packages from the 'pkgs' directory
  additions = final: _prev: import ../pkgs { pkgs = final; };

  # This one contains whatever you want to overlay
  # You can change versions, add patches, set compilation flags, anything really.
  # https://nixos.wiki/wiki/Overlays
  modifications = final: prev:
    {
      # Patch vagrant to ignore broken symlink check
      vagrant = prev.vagrant.overrideAttrs (old: {
      dontFixup = true;
      });
    };

  stable-packages = final: _prev: {
    pkgsStable = import inputs.nixpkgs-stable {
      system = final.system;
      config.allowUnfree = true;
    };
  };
}


===== ./pkgs/default.nix =====
{ pkgs }:

{
  systemPackages = import ./systemPackages { inherit pkgs; };
  userPackages   = import ./userPackages { inherit pkgs; };
}



===== ./pkgs/systemPackages/developerTools/default.nix =====
{ pkgs }: with pkgs; [
    gcc
    gnumake
    git 
    python3
    python3Packages.pip
    xclip 
    ninja
    gdb
    cmake
    pkg-config
]



===== ./pkgs/systemPackages/utilities/default.nix =====
{ pkgs }: with pkgs; [
  dmenu
  curl
  wget
  rsync
  st
  unzip
  zip
  zstd
  p7zip
  ntfs3g
  dosfstools
  exfatprogs
  util-linux
  brightnessctl
  htop
  rtkit
  timeshift
  udisks
]

===== ./pkgs/systemPackages/nixos-tools/default.nix =====
{ pkgs }: with pkgs; [
    home-manager
]

===== ./pkgs/systemPackages/default.nix =====
{ pkgs }: 
( import ./developerTools { inherit pkgs; })
++
( import ./nixos-tools { inherit pkgs; })
++
( import ./security { inherit pkgs; })
++
( import ./utilities{ inherit pkgs; })

===== ./pkgs/systemPackages/security/default.nix =====
{ pkgs }: with pkgs; [
    openssl
    nftables
]

===== ./pkgs/userPackages/utilities/default.nix =====
{ pkgs }: with pkgs; [
    nano
    neovim
    vim
    sutils
    cowsay
    tree
]

===== ./pkgs/userPackages/default.nix =====
{ pkgs }:

(import ./3DPrinting { inherit pkgs; })
++ 
(import ./terminal { inherit pkgs; })
++ 
(import ./utilities { inherit pkgs; })


===== ./pkgs/userPackages/terminal/default.nix =====
{ pkgs }: with pkgs; [
    zsh
    fastfetch
]

===== ./bootstrap.sh =====
#!/usr/bin/env bash

set -e

# Variables
XINITRC="$HOME/.xinitrc"

echo "[*] Changing Repo Name to Nixos"
mv /home/dbochoa77/nixosConfiguration /home/dbochoa77/nixos

echo "[*] Moving hardware configuration"
sudo mv /etc/nixos/hardware-configuration.nix /home/dbochoa77/nixos/hosts/nixos/

echo "[*] Removing Nixos Legacy Location"
sudo rm -fr /etc/nixos

echo "[*] Updating Nixos Flake Channel..."
nix flake update 

echo "[*] Rebuilding NixOS system..."
sudo nixos-rebuild switch --flake .#nixos

echo "[*] Updating Home Manager configuration..."
home-manager switch --flake .#nixos

echo "[*] Creating .xinitrc..."
cat > "$XINITRC" <<EOF
#!/bin/sh

# Launch DWM
exec ~/.config/dwm/dwm

# Compositor
picom --config ~/.config/picom.conf &

# Set wallpaper 
feh --no-fehbg --bg-scale /home/dbochoa77/personal/Wallpapers/hannibalCrossingTheAlps.jpg &

EOF

chmod +x "$XINITRC"

echo "[*] .xinitrc created successfully."
echo "[*] Done! You can start your DWM session with 'startx'."


===== ./flake.lock =====
{
  "nodes": {
    "dwmDotfiles": {
      "flake": false,
      "locked": {
        "lastModified": 1753394873,
        "narHash": "sha256-Hd4HLOhJdVlaL9VZ+zKthur4GRRpUMBEs2KyxW+ovB4=",
        "ref": "refs/heads/main",
        "rev": "4b538363e07ad723139c84fb67c0727c2eb0f9ae",
        "revCount": 2,
        "type": "git",
        "url": "https://github.com/dbochoa77/dwmRepo.git"
      },
      "original": {
        "type": "git",
        "url": "https://github.com/dbochoa77/dwmRepo.git"
      }
    },
    "home-manager": {
      "inputs": {
        "nixpkgs": [
          "nixpkgs"
        ]
      },
      "locked": {
        "lastModified": 1753675338,
        "narHash": "sha256-KDS9sr7dddH97lUXa7oxfRqphBlCA6JxZO4m/Z4W06I=",
        "owner": "nix-community",
        "repo": "home-manager",
        "rev": "e4b032ba5113664f0b8b23d956e59ce8e0bc349d",
        "type": "github"
      },
      "original": {
        "owner": "nix-community",
        "repo": "home-manager",
        "type": "github"
      }
    },
    "nixpkgs": {
      "locked": {
        "lastModified": 1753429684,
        "narHash": "sha256-9h7+4/53cSfQ/uA3pSvCaBepmZaz/dLlLVJnbQ+SJjk=",
        "owner": "nixos",
        "repo": "nixpkgs",
        "rev": "7fd36ee82c0275fb545775cc5e4d30542899511d",
        "type": "github"
      },
      "original": {
        "owner": "nixos",
        "ref": "nixos-unstable",
        "repo": "nixpkgs",
        "type": "github"
      }
    },
    "nixpkgs-stable": {
      "locked": {
        "lastModified": 1735563628,
        "narHash": "sha256-OnSAY7XDSx7CtDoqNh8jwVwh4xNL/2HaJxGjryLWzX8=",
        "owner": "nixos",
        "repo": "nixpkgs",
        "rev": "b134951a4c9f3c995fd7be05f3243f8ecd65d798",
        "type": "github"
      },
      "original": {
        "owner": "nixos",
        "ref": "nixos-24.05",
        "repo": "nixpkgs",
        "type": "github"
      }
    },
    "nvimDotfiles": {
      "flake": false,
      "locked": {
        "lastModified": 1752018499,
        "narHash": "sha256-UzDfqXYSskgF+YN+fN5x11PtKksBNtrSmgt6gKskDxE=",
        "ref": "refs/heads/main",
        "rev": "a7e4974e17d2633a3e788962f8ec385bd87c2d5f",
        "revCount": 3,
        "type": "git",
        "url": "https://github.com/dbochoa77/nvim.git"
      },
      "original": {
        "type": "git",
        "url": "https://github.com/dbochoa77/nvim.git"
      }
    },
    "root": {
      "inputs": {
        "dwmDotfiles": "dwmDotfiles",
        "home-manager": "home-manager",
        "nixpkgs": "nixpkgs",
        "nixpkgs-stable": "nixpkgs-stable",
        "nvimDotfiles": "nvimDotfiles"
      }
    }
  },
  "root": "root",
  "version": 7
}

===== ./hosts/dbochoa77/extraServices/podman/default.nix =====
{ config, lib, pkgs, ... }:

with lib; let
  cfg = config.extraServices.podman;
in {
  options.extraServices.podman.enable = mkEnableOption "enable podman";

  config = mkIf cfg.enable {
    virtualisation = {
      podman = {
        enable = true;
        dockerCompat = true;
        autoPrune = {
          enable = true;
          dates = "weekly";
          flags = [
            "--filter=until=24h"
            "--filter=label!=important"
          ];
        };
        defaultNetwork.settings.dns_enabled = true;
      };
    };

    environment.systemPackages = with pkgs; [
      podman
      podman-compose
    ];
  };
}


===== ./hosts/dbochoa77/extraServices/default.nix =====
{
  imports = [
    ./podman/default.nix
  ];
}

===== ./hosts/dbochoa77/users/dbochoa77.nix =====
{ config, pkgs, inputs, ... }: 

{ 
  home-manager.users.dbochoa77 =
    import ../../../home/dbochoa77/default.nix;
 }

===== ./hosts/dbochoa77/users/default.nix =====
{
  imports = [./dbochoa77.nix];
}


===== ./hosts/dbochoa77/default.nix =====
{ lib, pkgs, inputs, outputs, ... }: 

{
  imports = [
	./extraServices
	./users 
	inputs.home-manager.nixosModules.home-manager
  ];
  home-manager = { 
    useUserPackages = true;
    extraSpecialArgs = {inherit inputs outputs; };
  };

  nixpkgs = {
 
    overlays = [

      outputs.overlays.additions
      outputs.overlays.modifications
      outputs.overlays.stable-packages

    ];

  # Allows Closed Sourced packages
    config = {
      allowUnfree = true;
    };
  };

  # Experimental Features Nix-command and Flakes
  nix = { 
    settings = {
      experimental-features = ["nix-command" "flakes"];
      trusted-users = [
        "root"
	"dbochoa77"
      ];
    };

    # Automaticlly Cleans Nixos Generations 30d older
    gc = {
      automatic = true; 
      options = "--delete-older-than 30d";
    };
   
    optimise.automatic = true;
 
    registry = 
      (lib.mapAttrs (_: flake: {inherit flake;}))
      ((lib.filterAttrs (_: lib.isType "flake")) inputs);
    nixPath = ["/$nixos-config"];
  };
}


===== ./hosts/nixos/services/keymaps/default.nix =====
{ config, pkgs, ... }:

{
  services.xserver.xkb = {
    layout = "us";
    variant = "";
  };
}

===== ./hosts/nixos/services/internationisationProps/default.nix =====
{ config, pkgs, ... }:

{
  i18n.defaultLocale = "en_US.UTF-8";

  i18n.extraLocaleSettings = {
    LC_ADDRESS = "en_US.UTF-8";
    LC_IDENTIFICATION = "en_US.UTF-8";
    LC_MEASUREMENT = "en_US.UTF-8";
    LC_MONETARY = "en_US.UTF-8";
    LC_NAME = "en_US.UTF-8";
    LC_NUMERIC = "en_US.UTF-8";
    LC_PAPER = "en_US.UTF-8";
    LC_TELEPHONE = "en_US.UTF-8";
    LC_TIME = "en_US.UTF-8";
  };
}

===== ./hosts/nixos/services/networking/default.nix =====
{ config, pkgs, ... }:

{
  networking.networkmanager.enable = true;
}


===== ./hosts/nixos/services/stateVersion/default.nix =====
{ config, pkgs, ... }:

{ 
  system.stateVersion = "25.11";
}

===== ./hosts/nixos/services/ssh/default.nix =====
{ config, pkgs, ... }:

{  
  services.openssh = {
     enable = true;
     settings.PermitRootLogin = "no";
     allowSFTP = true;
   };

    services.openssh.extraConfig = ''
    X11Forwarding yes
    X11DisplayOffset 10
    X11UseLocalhost yes
  '';

  services.openssh.settings.X11Forwarding = true;
  
  environment.systemPackages = with pkgs; [
    xorg.xauth
  ];
}

===== ./hosts/nixos/services/default.nix =====
{
  imports = [
    ./boot/default.nix
    ./containers/default.nix
    ./flakes/default.nix
    ./hostname/default.nix
    ./internationisationProps/default.nix
    ./keymaps/default.nix
    ./networking/default.nix
    ./ssh/default.nix
    ./stateVersion/default.nix
    ./timezone/default.nix
    ./unfree/default.nix
    ./user/default.nix
  ];
}

===== ./hosts/nixos/services/timezone/default.nix =====
{ config, pkgs, ... }:

{
  time.timeZone = "America/Los_Angeles";
}

===== ./hosts/nixos/services/flakes/default.nix =====
{ config, pkgs, ... }:

{
  nix.settings = {
    experimental-features = [ "nix-command" "flakes" ];
    trusted-users = [ "root" "dbochoa77"];
  };
}


===== ./hosts/nixos/services/user/default.nix =====
{ config, pkgs, ... }:

{
  users.users.dbochoa77 = {
    isNormalUser = true;
    description = "dbochoa77";
    extraGroups = [ "media" "networkmanager" "wheel" "docker" ];
  };
}

===== ./hosts/nixos/services/unfree/default.nix =====
{ config, pkgs, ... }:

{
  nixpkgs.config.allowUnfree = true;    
}

===== ./hosts/nixos/services/boot/systemd/default.nix =====
{ config, pkgs, ... }:

{
  boot.loader = {
    systemd-boot.enable = true;
    efi.canTouchEfiVariables = true;
    };
}

===== ./hosts/nixos/services/boot/latestKernel/default.nix =====
{ config, pkgs, ... }:

{
    boot.kernelPackages = pkgs.linuxPackages_latest;
}

===== ./hosts/nixos/services/boot/default.nix =====
{
  imports = [
    ./systemd/default.nix
    ./latestKernel/default.nix
  ];
}

===== ./hosts/nixos/services/containers/wireguard/default.nix =====
{ config, pkgs, ... }:

{

}

===== ./hosts/nixos/services/containers/default.nix =====
{
  imports = [
    ./wireguard/default.nix
    ./echo/default.nix
  ];
}

===== ./hosts/nixos/services/containers/echo/default.nix =====
{lib, ...}: {
  virtualisation.oci-containers.containers."echo-http-service" = {
    image = "hashicorp/http-echo";
    extraOptions = ["-text='Hello, World!'" "--network=web"];
    ports = ["5678:5678"];
  };

  system.activationScripts.createPodmanNetworkWeb = lib.mkAfter ''
    if ! /run/current-system/sw/bin/podman network exists web; then
      /run/current-system/sw/bin/podman network create web
    fi
  '';
}


===== ./hosts/nixos/services/hostname/default.nix =====
{ config, pkgs, ... }:

{
    networking.hostName = "nixos";
}

===== ./hosts/nixos/configuration.nix =====
{ config, pkgs, lib, ... }:

{
  imports =
    [
      ./hardware-configuration.nix
      ./services/default.nix
    ];

  environment.systemPackages = import ../../pkgs/systemPackages {inherit pkgs; };

  # Encryption   
  services.encryption.enable = true; 

}

===== ./hosts/nixos/secrets.nix =====
#{ inputs, ...}: 
#
#{ 
#  age = {
#    secrets = {
#      secret1 = {
#         file = "${inputs.self}/secrets/secret1.age";
#         owner = "dbochoa77";
#         group = "dbochoa77";
#         path = "home/dbochoa77/.secret1";
#        };
#      };
#    };
#  }

===== ./hosts/nixos/default.nix =====
{ config, inputs, outputs, lib, pkgs, ... }:

{
 imports = [
   ./hardware-configuration.nix
    #   ./secrets.nix
   ./services
   ../dbochoa77
   ../dbochoa77/extraServices
   ./configuration.nix
   inputs.home-manager.nixosModules.home-manager
  ];

  extraServices.podman.enable = true;

  #
  #  # Define a user account. Don't forget to set a password with ‘passwd’.
  #  users.users.dbochoa77 = {
  #    isNormalUser = true;
  #    description = "dbochoa77";
  #    extraGroups = [ "media" "networkmanager" "wheel" "docker" ];
  #  };

  home-manager = {
   useUserPackages = true;
   extraSpecialArgs = { inherit inputs outputs; };
   users.dbochoa77 = 
   import ../../home/nixos/dbochoa77.nix; 
  
   }; 
}

===== ./hosts/nixos/hardware-configuration.nix =====
# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{ config, lib, pkgs, modulesPath, ... }:

{
  imports =
    [ (modulesPath + "/installer/scan/not-detected.nix")
    ];

  boot.initrd.availableKernelModules = [ "xhci_pci" "thunderbolt" "nvme" "usb_storage" "sd_mod" "sdhci_pci" ];
  boot.initrd.kernelModules = [ ];
  boot.kernelModules = [ "kvm-intel" ];
  boot.extraModulePackages = [ ];

  fileSystems."/" =
    { device = "/dev/disk/by-uuid/950941a4-e959-4e9a-8a05-8a5a4c8a4ddb";
      fsType = "ext4";
    };

  boot.initrd.luks.devices."luks-95ba61d7-adce-435d-84f8-c9551c8c035e".device = "/dev/disk/by-uuid/95ba61d7-adce-435d-84f8-c9551c8c035e";

  fileSystems."/boot" =
    { device = "/dev/disk/by-uuid/63CE-0BD9";
      fsType = "vfat";
      options = [ "fmask=0077" "dmask=0077" ];
    };

  swapDevices =
    [ { device = "/dev/disk/by-uuid/cf1f3af9-8a03-416a-9426-50b875215172"; }
    ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.enp0s20f0u1c2.useDHCP = lib.mkDefault true;
  # networking.interfaces.wlp46s0f0.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.intel.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
}
