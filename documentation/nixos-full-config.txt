========== /home/dbochoa77/nixosServer/flake.lock ==========
{
  "nodes": {
    "home-manager": {
      "inputs": {
        "nixpkgs": [
          "nixpkgs"
        ]
      },
      "locked": {
        "lastModified": 1751131846,
        "narHash": "sha256-VqXwSsEpmQlVUK0Y6FZ4YQwB63zWWD6ziHgQW2zEiUA=",
        "owner": "nix-community",
        "repo": "home-manager",
        "rev": "da077f20db88a173629624a30380658840d377b3",
        "type": "github"
      },
      "original": {
        "owner": "nix-community",
        "repo": "home-manager",
        "type": "github"
      }
    },
    "nixpkgs": {
      "locked": {
        "lastModified": 1751011381,
        "narHash": "sha256-krGXKxvkBhnrSC/kGBmg5MyupUUT5R6IBCLEzx9jhMM=",
        "owner": "nixos",
        "repo": "nixpkgs",
        "rev": "30e2e2857ba47844aa71991daa6ed1fc678bcbb7",
        "type": "github"
      },
      "original": {
        "owner": "nixos",
        "ref": "nixos-unstable",
        "repo": "nixpkgs",
        "type": "github"
      }
    },
    "nixpkgs-stable": {
      "locked": {
        "lastModified": 1735563628,
        "narHash": "sha256-OnSAY7XDSx7CtDoqNh8jwVwh4xNL/2HaJxGjryLWzX8=",
        "owner": "nixos",
        "repo": "nixpkgs",
        "rev": "b134951a4c9f3c995fd7be05f3243f8ecd65d798",
        "type": "github"
      },
      "original": {
        "owner": "nixos",
        "ref": "nixos-24.05",
        "repo": "nixpkgs",
        "type": "github"
      }
    },
    "root": {
      "inputs": {
        "home-manager": "home-manager",
        "nixpkgs": "nixpkgs",
        "nixpkgs-stable": "nixpkgs-stable"
      }
    }
  },
  "root": "root",
  "version": 7
}


========== /home/dbochoa77/nixosServer/flake.nix ==========
{
  description = "Configuration for Nixos Server";

 inputs = {
    home-manager = {
      url = "github:nix-community/home-manager";
      inputs.nixpkgs.follows = "nixpkgs";
    };
    nixpkgs.url = "github:nixos/nixpkgs/nixos-unstable";
    nixpkgs-stable.url = "github:nixos/nixpkgs/nixos-24.05";
  };

  outputs = { 
	self, 
	home-manager,
	nixpkgs,
	...
    } @ inputs: let
      inherit (self) outputs;
      systems = [
        "x86_64-linux"
      ];
      forAllSystems = nixpkgs.lib.genAttrs systems;
  
  in {
    packages =
      forAllSystems (system: import ./pkgs nixpkgs.legacyPackages.${system});
    overlays = import ./overlays {inherit inputs;};


    nixosConfigurations = {
        nixosServer = nixpkgs.lib.nixosSystem {
	  specialArgs = {inherit inputs outputs;};
	  modules = [./hosts/nixosServer/configuration.nix
		     ./hosts/nixosServer/hardware-configuration.nix
	  ];
	};
      };
      homeConfigurations = { 
        "nixosServer@nixosServer" = home-manager.lib.homeManagerConfiguration {
	  pkgs = nixpkgs.legacyPackages."x86_64-linux";
	  extraSpecialArgs = {inherit inputs outputs;};
	  modules = [./home/dbochoa77/default.nix];
	};
      };
    };
} 


========== /home/dbochoa77/nixosServer/home/dbochoa77/default.nix ==========
{
  config,
  lib,
  outputs,
  pkgs,
  ...
}: {
 
    home.stateVersion = "24.11";
    home.username = "dbochoa77";
    home.homeDirectory = "/home/dbochoa77";


    nixpkgs = {
    # Overlays
    overlays = [
    outputs.overlays.additions
    outputs.overlays.modifications
    outputs.overlays.stable-packages

    ];

    config = {
    allowUnfree = true;

    allowUnfreePredicate = _: true;
  };
};

  nix = {
    package = lib.mkDefault pkgs.nix;
    settings = {
      experimental-features = ["nix-command" "flakes"];
      warn-dirty = false;
    };
  };
}


========== /home/dbochoa77/nixosServer/home/nixosServer/dbochoa77.nix ==========
{ config, ... }: { imports = [ ./home.nix ../dbochoa77 ]; }


========== /home/dbochoa77/nixosServer/home/nixosServer/home.nix ==========
{ config, lib, pkgs, ... }:

{
  home.username = lib.mkDefault "dbochoa77";
  home.homeDirectory = lib.mkDefault "/home/${config.home.username}";

  home.stateVersion = "24.05";

  home.packages = [
  ];

  home.file = {
  };

  home.sessionVariables = {
    EDITOR = "nvim";
  };

  programs.home-manager.enable = true;
}


========== /home/dbochoa77/nixosServer/hosts/dbochoa77/default.nix ==========
{
  lib,
  inputs,
  outputs,
  ...
}: {
  nixpkgs = {
 
    overlays = [

      outputs.overlays.additions
      outputs.overlays.modifications
      outputs.overlays.stable-packages

    ];

    config = {
      allowUnfree = true;
    };
  };

  nix = { 
    settings = {
      experimental-features = "nix-command flakes";
      trusted-users = [
        "root"
	"dbochoa77"
      ];
    };
    gc = {
      automatic = true; 
      options = "--delete-older-than 30d";
    };
    optimise.automatic = true;
    registry = 
      (lib.mapAttrs (_: flake: {inherit flake;}))
      ((lib.filterAttrs (_: lib.isType "flake")) inputs);
    nixPath = ["/nixosServer-config"];
  };
}



========== /home/dbochoa77/nixosServer/hosts/nixosServer/configuration.nix ==========
{ config, pkgs, lib, ... }:

{
  imports =
    [
      ./hardware-configuration.nix
    ];

boot.loader = {
  systemd-boot.enable = false;
  grub = {
    enable = true;
    efiSupport = true;
    devices = [ "nodev" ]; # for UEFI systems
  };
  efi.canTouchEfiVariables = true;
};


  # Flakes
  nix.settings.experimental-features = [ "nix-command" "flakes" ];
  nix.settings.trusted-users = [ "root" "dbochoa77" ];

  # Hostname
  networking.hostName = "nixosServer"; # Define your hostname.

  # Enable networking
  networking.networkmanager.enable = true;

  # Set your time zone.
  time.timeZone = "America/Los_Angeles";

  # Select internationalisation properties.
  i18n.defaultLocale = "en_US.UTF-8";

  i18n.extraLocaleSettings = {
    LC_ADDRESS = "en_US.UTF-8";
    LC_IDENTIFICATION = "en_US.UTF-8";
    LC_MEASUREMENT = "en_US.UTF-8";
    LC_MONETARY = "en_US.UTF-8";
    LC_NAME = "en_US.UTF-8";
    LC_NUMERIC = "en_US.UTF-8";
    LC_PAPER = "en_US.UTF-8";
    LC_TELEPHONE = "en_US.UTF-8";
    LC_TIME = "en_US.UTF-8";
  };

  # Configure keymap in X11
  services.xserver.xkb = {
    layout = "us";
    variant = "";
  };

  # Define a user account. Don't forget to set a password with ‘passwd’.
  users.users.dbochoa77 = {
    isNormalUser = true;
    description = "dbochoa77";
    extraGroups = [ "media" "networkmanager" "wheel" "docker" ];
  };

  # Allow unfree packages
  nixpkgs.config.allowUnfree = true;

  environment.systemPackages = with pkgs; [
  
  # ────── Core Utilities ──────
  htop
  btop
  tmux
  rsync
  ripgrep
  fd
  ncdu
  bash-completion
  file
  neovim
  vim 
  fastfetch

  # ────── File Sync / Backup ──────
  rclone
  borgbackup
  restic
  syncthing

  # ────── Networking ──────
  openssh
  mosh
  nmap
  iproute2
  wget
  curl
  inetutils

  # ────── Security ──────
  nftables
  fail2ban
  gnupg
  openssl

  # ------ Jellyfin -------
  jellyfin
  jellyfin-web
  jellyfin-ffmpeg
 
  # ────── Web & Containers ──────
  nginx
  caddy
  docker
  docker-compose
  podman
  traefik

  # ────── Monitoring & Logging ──────
  prometheus
  grafana
  uptime-kuma
  glances
  logrotate

  # ────── DevOps & Automation ──────
  git
  ansible
  nixfmt-classic
  direnv
  nix-index
  home-manager

  # ────── Virtualization ──────
  qemu
  libvirt
  virt-manager
  vagrant
  spice-vdagent

  # ────── NixOS Tools ──────
  nvd
  nix-output-monitor
  nix-tree

  ];

  # Enable the OpenSSH daemon.
   services.openssh = {
     enable = true;
     settings.PermitRootLogin = "no";
     allowSFTP = true;
   };

  # System State Version
  system.stateVersion = "25.11"; # Did you read the comment?

}


========== /home/dbochoa77/nixosServer/hosts/nixosServer/default.nix ==========
{ config, inputs, outputs, lib, pkgs, ... }:

{
 imports = [
   ./hardware-configuration.nix
   inputs.home-manager.nixosModules.home-manager
];

networking.hostName = "nixosServer";

  # Define a user account. Don't forget to set a password with ‘passwd’.
  users.users.dbochoa77 = {
    isNormalUser = true;
    description = "dbochoa77";
    extraGroups = [ "media" "networkmanager" "wheel" "docker" ];
  };

home-manager = {
  useUserPackages = true;
  extraSpecialArgs = { inherit inputs outputs; };
  users.dbochoa77 = 
  import ../../home/nixosServer/dbochoa77.nix; 

  }; 
}


========== /home/dbochoa77/nixosServer/hosts/nixosServer/hardware-configuration.nix ==========
# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{ config, lib, pkgs, modulesPath, ... }:

{
  imports =
    [ (modulesPath + "/profiles/qemu-guest.nix")
    ];

  boot.initrd.availableKernelModules = [ "ahci" "xhci_pci" "virtio_pci" "sr_mod" "virtio_blk" ];
  boot.initrd.kernelModules = [ ];
  boot.kernelModules = [ "kvm-intel" ];
  boot.extraModulePackages = [ ];

  fileSystems."/" =
    { device = "/dev/disk/by-uuid/9972ba1b-90b8-4110-b2a5-7b505bca8fbf";
      fsType = "ext4";
    };

  boot.initrd.luks.devices."luks-a0cac57f-da79-43e7-83a1-f0a6d9f65500".device = "/dev/disk/by-uuid/a0cac57f-da79-43e7-83a1-f0a6d9f65500";

  fileSystems."/boot" =
    { device = "/dev/disk/by-uuid/887C-A1B5";
      fsType = "vfat";
      options = [ "fmask=0077" "dmask=0077" ];
    };

  swapDevices = [ ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.enp1s0.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
}


========== /home/dbochoa77/nixosServer/hosts/nixosServer/.nvimlog ==========


========== /home/dbochoa77/nixosServer/.nvimlog ==========


========== /home/dbochoa77/nixosServer/overlays/default.nix ==========
{ inputs, ... }: {
  # This one brings our custom packages from the 'pkgs' directory
  additions = final: _prev: import ../pkgs { pkgs = final; };

  # This one contains whatever you want to overlay
  # You can change versions, add patches, set compilation flags, anything really.
  # https://nixos.wiki/wiki/Overlays
  modifications = final: prev:
    {
      # example = prev.example.overrideAttrs (oldAttrs: rec {
      # ...
      # });
    };

  stable-packages = final: _prev: {
    stable = import inputs.nixpkgs-stable {
      system = final.system;
      config.allowUnfree = true;
    };
  };
}



========== /home/dbochoa77/nixosServer/overlays/.nvimlog ==========


========== /home/dbochoa77/nixosServer/pkgs/default.nix ==========
{ pkgs, ... }:

{

}


========== /home/dbochoa77/nixosServer/pkgs/my-packages/default.nix ==========
# Your custom nix-package


========== /home/dbochoa77/nixosServer/README.md ==========
# nixosServer
My Nixos Server for my homelab
- Setting it up with nixos and flakes to make ease of reproducabilty. 
- Starting it in a nixos virtual machine using qemu/kvm
- Will move it to a thinkpad E455D that will be modified for server uses
- End game will move to a Server with  Mutiple servers

# Services Involved 
((X) Signels Service is installed and ready)
( Work will be tracked out of 100 )
- Grafene
- Promthenus
- Gentoo VM
- ngnix
- wireguard
- jellyfin 
- mosquito 



