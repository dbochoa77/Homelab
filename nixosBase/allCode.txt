===== DIRECTORY STRUCTURE =====
.
├── allCode.txt
├── bootstrapNixosBase.sh
├── flake.lock
├── flake.nix
├── home
│   ├── admin
│   │   └── default.nix
│   ├── features
│   │   ├── alias
│   │   │   └── default.nix
│   │   ├── default.nix
│   │   └── fastfetch
│   │       └── default.nix
│   └── nixos
│       ├── admin.nix
│       ├── dotfiles
│       │   └── nvim
│       │       └── default.nix
│       └── home.nix
├── hosts
│   ├── admin
│   │   ├── default.nix
│   │   ├── extraServices
│   │   │   ├── default.nix
│   │   │   └── podman
│   │   │       └── default.nix
│   │   └── users
│   │       ├── admin.nix
│   │       └── default.nix
│   └── nixos
│       ├── configuration.nix
│       ├── default.nix
│       ├── disko-config.nix
│       ├── hardware-configuration.nix
│       ├── secrets.nix
│       └── services
│           ├── boot
│           │   ├── default.nix
│           │   ├── latestKernel
│           │   │   └── default.nix
│           │   └── systemd
│           │       └── default.nix
│           ├── containers
│           │   ├── default.nix
│           │   ├── echo
│           │   │   └── default.nix
│           │   └── wireguard
│           │       └── default.nix
│           ├── default.nix
│           ├── flakes
│           │   └── default.nix
│           ├── hostname
│           │   └── default.nix
│           ├── internationisationProps
│           │   └── default.nix
│           ├── keymaps
│           │   └── default.nix
│           ├── networking
│           │   └── default.nix
│           ├── ssh
│           │   └── default.nix
│           ├── stateVersion
│           │   └── default.nix
│           ├── timezone
│           │   └── default.nix
│           ├── unfree
│           │   └── default.nix
│           └── user
│               └── default.nix
├── overlays
│   └── default.nix
├── pkgs
│   ├── default.nix
│   ├── systemPackages
│   │   ├── default.nix
│   │   ├── developerTools
│   │   │   └── default.nix
│   │   ├── nixos-tools
│   │   │   └── default.nix
│   │   ├── security
│   │   │   └── default.nix
│   │   └── utilities
│   │       └── default.nix
│   └── userPackages
│       ├── default.nix
│       ├── homemanger
│       │   └── default.nix
│       ├── terminal
│       │   └── default.nix
│       └── utilities
│           └── default.nix
└── printAll.sh

43 directories, 50 files

===== FILE CONTENTS =====

===== ./overlays/default.nix =====
{ inputs, ... }: 

{
  # This one brings our custom packages from the 'pkgs' directory
  additions = final: _prev: import ../pkgs { pkgs = final; };

  # This one contains whatever you want to overlay
  # You can change versions, add patches, set compilation flags, anything really.
  # https://nixos.wiki/wiki/Overlays
  modifications = final: prev:
    {
      # Patch vagrant to ignore broken symlink check
      vagrant = prev.vagrant.overrideAttrs (old: {
      dontFixup = true;
      });
    };

  stable-packages = final: _prev: {
    pkgsStable = import inputs.nixpkgs-stable {
      system = final.system;
      config.allowUnfree = true;
    };
  };
}


===== ./home/nixos/dotfiles/nvim/default.nix =====
{ inputs, ... }:

{
home.file.".config/nvim" = { 
    source = "${inputs.nvimDotfiles}/nvim";
    recursive = true;
  };
}

===== ./home/nixos/admin.nix =====
{ config, ... }: 

{ 
  imports = [ 
    ../admin
    ../features
    ./home.nix
    ./dotfiles/nvim 
  ]; 

  features = {
    cli = {
    fastfetch.enable = true;
    };
  };
}


===== ./home/nixos/home.nix =====
{ config, lib, pkgs, ... }:

{
  home.username = lib.mkDefault "admin";
  home.homeDirectory = lib.mkDefault "/home/${config.home.username}";

  home.stateVersion = "24.05";

  home.packages = import ../../pkgs/userPackages { inherit pkgs; };

  home.sessionVariables = {
    EDITOR = "nvim";
  };

  programs.home-manager.enable = true;
}

===== ./home/admin/default.nix =====
{ config, lib, outputs, pkgs, ... }: 

{
   nixpkgs = {

    # Overlays
    overlays = [
    outputs.overlays.additions
    outputs.overlays.modifications
    outputs.overlays.stable-packages

    ];

    config = {
    allowUnfree = true;

    allowUnfreePredicate = _: true;
  };
};

  nix = {
    package = lib.mkDefault pkgs.nix;
    settings = {
      experimental-features = ["nix-command" "flakes"];
      warn-dirty = false;
    };
  };
}

===== ./home/features/alias/default.nix =====
{ config, lib, ... }:

{
  programs.bash = {
    enable = true;
    shellAliases = {
      # Basic Commands
      c = "clear";
      h = "history";
      now = "date +%T";
      grep = "rg";
      ps = "procs";
      top = "htop";
      df = "df -h";
      du = "du -sh";
      t = "tree -L 2";

      # File Listing
      ls = "eza -a --icons --git";
      la = "exa -la --icons --git";
      lt = "eza -T --git-ignore --icons";
      cat = "bat --style=plain,numbers --paging=never";
      uglycat = "bat -p --style=plain --paging=never --decorations=never";

      # Directory Movement
      mkdir = "mkdir -p";
      ".." = "cd ..";
      "..." = "cd ../../";
      "...." = "cd ../../../..";
      ".4" = "cd ../../../../";
      ".5" = "cd ../../../../../";

      # Git Shortcuts
      ga = "git add .";
      gc = "git commit -";
      gs = "git status";
 
      # Nix Config Rebuild
      rebuild = ''
         cd ~/Homelab/nixosBase &&
         nix flake update &&
         sudo nixos-rebuild switch --flake ~/Homelab/nixosBase#nixos &&
         home-manager switch --flake ~/Homelab/nixosBase#nixos  
      '';

      # Neovim (root)
      v = "sudo -E nvim";
    };

    initExtra = ''
      cd() {
        builtin cd "$@" && eza -a --icons --git;
      }

      fastfetch
      ls -d -- * .*
    '';
  };
}


===== ./home/features/fastfetch/default.nix =====
{ config, lib, pkgs, ... }:

with lib; let 
  cfg = config.features.cli.fastfetch;
in {
    options.features.cli.fastfetch.enable = mkEnableOption "enable fastfetch";

    config = mkIf cfg.enable {
        home.packages = with pkgs; [fastfetch];
    };
}



===== ./home/features/default.nix =====
{pkgs, ... }: 

{
    imports = [
    ./alias/default.nix
    ./fastfetch/default.nix
    ];

  programs.eza = {
    enable = true;
    enableFishIntegration = true;
    enableBashIntegration = true;
    extraOptions = ["-l" "--icons" "--git" "-a"];
  };

  programs.bat = {enable = true;};

  home.packages = with pkgs; [
    coreutils 
    fd
    htop
    httpie
    jq
    procs
    ripgrep
    tldr
    zip 
  ];
}

===== ./hosts/nixos/secrets.nix =====
{ config, inputs, ... }:

{
  age = {
    secrets = {
      secret1 = {
         file = "${inputs.secrets}/secret1.age";
        };
      };
    };
}

===== ./hosts/nixos/services/unfree/default.nix =====
{ config, pkgs, ... }:

{
  nixpkgs.config.allowUnfree = true;    
}

===== ./hosts/nixos/services/flakes/default.nix =====
{ config, pkgs, ... }:

{
  nix.settings = {
    experimental-features = [ "nix-command" "flakes" ];
    trusted-users = [ "root" "admin"];
  };
}


===== ./hosts/nixos/services/ssh/default.nix =====
{ config, pkgs, ... }:

{  
  services.openssh = {
     enable = true;
     settings.PermitRootLogin = "no";
     allowSFTP = true;
   };

    services.openssh.extraConfig = ''
    X11Forwarding yes
    X11DisplayOffset 10
    X11UseLocalhost yes
  '';

  services.openssh.settings.X11Forwarding = true;
  
  environment.systemPackages = with pkgs; [
    xorg.xauth
  ];
}

===== ./hosts/nixos/services/keymaps/default.nix =====
{ config, pkgs, ... }:

{
  services.xserver.xkb = {
    layout = "us";
    variant = "";
  };
}

===== ./hosts/nixos/services/timezone/default.nix =====
{ config, pkgs, ... }:

{
  time.timeZone = "America/Los_Angeles";
}

===== ./hosts/nixos/services/stateVersion/default.nix =====
{ config, pkgs, ... }:

{ 
  system.stateVersion = "25.11";
}

===== ./hosts/nixos/services/internationisationProps/default.nix =====
{ config, pkgs, ... }:

{
  i18n.defaultLocale = "en_US.UTF-8";

  i18n.extraLocaleSettings = {
    LC_ADDRESS = "en_US.UTF-8";
    LC_IDENTIFICATION = "en_US.UTF-8";
    LC_MEASUREMENT = "en_US.UTF-8";
    LC_MONETARY = "en_US.UTF-8";
    LC_NAME = "en_US.UTF-8";
    LC_NUMERIC = "en_US.UTF-8";
    LC_PAPER = "en_US.UTF-8";
    LC_TELEPHONE = "en_US.UTF-8";
    LC_TIME = "en_US.UTF-8";
  };
}

===== ./hosts/nixos/services/user/default.nix =====
{ config, pkgs, ... }:

{
  users.users.admin = {
    isNormalUser = true;
    description = "admin";
    extraGroups = [ "media" "networkmanager" "wheel" "docker" ];
  };
}

===== ./hosts/nixos/services/boot/latestKernel/default.nix =====
{ config, pkgs, ... }:

{
    boot.kernelPackages = pkgs.linuxPackages_latest;
}

===== ./hosts/nixos/services/boot/systemd/default.nix =====
{ config, pkgs, ... }:

{
  boot.loader = {
    systemd-boot.enable = true;
    efi.canTouchEfiVariables = true;
    };
}

===== ./hosts/nixos/services/boot/default.nix =====
{
  imports = [
    ./systemd/default.nix
    ./latestKernel/default.nix
  ];
}

===== ./hosts/nixos/services/networking/default.nix =====
{ config, pkgs, ... }:

{
  networking.networkmanager.enable = true;
}


===== ./hosts/nixos/services/default.nix =====
{
  imports = [
    ./boot/default.nix
    ./containers/default.nix
    ./flakes/default.nix
    ./hostname/default.nix
    ./internationisationProps/default.nix
    ./keymaps/default.nix
    ./networking/default.nix
    ./ssh/default.nix
    ./stateVersion/default.nix
    ./timezone/default.nix
    ./unfree/default.nix
    ./user/default.nix
  ];
}

===== ./hosts/nixos/services/containers/wireguard/default.nix =====
{ config, pkgs, ... }:

{

}

===== ./hosts/nixos/services/containers/echo/default.nix =====
{lib, ...}: {
  virtualisation.oci-containers.containers."echo-http-service" = {
    image = "hashicorp/http-echo";
    extraOptions = ["-text='Hello, World!'" "--network=web"];
    ports = ["5678:5678"];
  };

  system.activationScripts.createPodmanNetworkWeb = lib.mkAfter ''
    if ! /run/current-system/sw/bin/podman network exists web; then
      /run/current-system/sw/bin/podman network create web
    fi
  '';
}


===== ./hosts/nixos/services/containers/default.nix =====
{
  imports = [
    ./wireguard/default.nix
    ./echo/default.nix
  ];
}

===== ./hosts/nixos/services/hostname/default.nix =====
{ config, pkgs, hostname, ... }:

{
    networking.hostName = hostname;
}

===== ./hosts/nixos/hardware-configuration.nix =====
# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{ config, lib, pkgs, modulesPath, ... }:

{
  imports =
    [ (modulesPath + "/profiles/qemu-guest.nix")
    ];

  boot.initrd.availableKernelModules = [ "ahci" "xhci_pci" "virtio_pci" "sr_mod" "virtio_blk" ];
  boot.initrd.kernelModules = [ ];
  boot.kernelModules = [ "kvm-intel" ];
  boot.extraModulePackages = [ ];

  #  fileSystems."/" =
  #    { device = "/dev/disk/by-uuid/f2dc1a58-84af-4777-93d6-1f16ace67e2c";
  #      fsType = "ext4";
  #    };
  #
  #  fileSystems."/boot" =
  #    { device = "/dev/disk/by-uuid/D244-BDA2";
  #      fsType = "vfat";
  #      options = [ "fmask=0077" "dmask=0077" ];
  #    };
  #
  #swapDevices = [ ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.enp1s0.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
}

===== ./hosts/nixos/disko-config.nix =====
{
  disko.devices = {
    disk = {
      nixos = {
        type = "disk";
        device = "/dev/vda";
        content = {
          type = "gpt";
          partitions = {
            boot = {
              size = "1M";
              type = "EF02"; # for grub MBR
            };
            ESP = {
              size = "512M";
              type = "EF00";
              content = {
                type = "filesystem";
                format = "vfat";
                mountpoint = "/boot";
              };
            };
            swap = { 
              size = "8G";
              content = {
                type = "swap";
              };
            };
            root = {
              size = "100%";
              content = {
                type = "filesystem";
                format = "ext4";
                mountpoint = "/";
              };
            };
          };
        };
      };
    };
  };
}


===== ./hosts/nixos/default.nix =====
{ config, inputs, outputs, lib, pkgs, ... }:

{
 imports = [
   ./hardware-configuration.nix
   ./secrets.nix
   ./services
   ../admin
   ../admin/extraServices
   ./configuration.nix
   inputs.home-manager.nixosModules.home-manager
   inputs.disko.nixosModules.disko
  ];

  extraServices.podman.enable = true;

  home-manager = {
   useUserPackages = true;
   extraSpecialArgs = { inherit inputs outputs; };
   users.admin = 
   import ../../home/nixos/admin.nix; 
  
   }; 
}

===== ./hosts/nixos/configuration.nix =====
{ config, pkgs, lib, ... }:

{
  imports =
    [
      ./hardware-configuration.nix
      ./services/default.nix
      ./disko-config.nix
    ];

  environment.systemPackages = import ../../pkgs/systemPackages {inherit pkgs; };
}

===== ./hosts/admin/users/admin.nix =====
{ config, pkgs, inputs, ... }: 

{ 
  home-manager.users.admin =
    import ../../../home/admin/default.nix;
 }

===== ./hosts/admin/users/default.nix =====
{
  imports = [./admin.nix];
}


===== ./hosts/admin/default.nix =====
{ lib, pkgs, inputs, outputs, ... }: 

{
  imports = [
	./extraServices
	./users 
	inputs.home-manager.nixosModules.home-manager
  ];

  home-manager = { 
    useUserPackages = true;
    extraSpecialArgs = {inherit inputs outputs; };
  };

  nixpkgs = { 
    overlays = [
      outputs.overlays.additions
      outputs.overlays.modifications
      outputs.overlays.stable-packages
    ];

  # Allows Closed Sourced packages
    config = {
      allowUnfree = true;
    };
  };

  # Experimental Features Nix-command and Flakes
  nix = { 
    settings = {
      experimental-features = ["nix-command" "flakes"];
      trusted-users = [
        "root"
	"admin"
      ];
    };

    # Automaticlly Cleans Nixos Generations 30d older
    gc = {
      automatic = true; 
      options = "--delete-older-than 30d";
    };
   
    optimise.automatic = true;
 
    registry = 
      (lib.mapAttrs (_: flake: {inherit flake;}))
      ((lib.filterAttrs (_: lib.isType "flake")) inputs);
  };
}


===== ./hosts/admin/extraServices/podman/default.nix =====
{ config, lib, pkgs, ... }:

with lib; let
  cfg = config.extraServices.podman;
in {
  options.extraServices.podman.enable = mkEnableOption "enable podman";

  config = mkIf cfg.enable {
    virtualisation = {
      podman = {
        enable = true;
        dockerCompat = true;
        autoPrune = {
          enable = true;
          dates = "weekly";
          flags = [
            "--filter=until=24h"
            "--filter=label!=important"
          ];
        };
        defaultNetwork.settings.dns_enabled = true;
      };
    };

    environment.systemPackages = with pkgs; [
      podman
      podman-compose
    ];
  };
}


===== ./hosts/admin/extraServices/default.nix =====
{
  imports = [
    ./podman/default.nix
  ];
}

===== ./allCode.txt =====

===== ./bootstrapNixosBase.sh =====
#!/usr/bin/env bash

set -e

# Variables
XINITRC="$HOME/.xinitrc"

echo "[*] Partioning with Disko" 
sudo nix --experimental-features "nix-command flakes" run github:nix-community/disko/latest -- --mode destroy,format,mount /tmp/disk-config.nix

echo "[*] Cleaning system for Nixos Installation
sudo nix-collect-garbage -d && sudo nix store gc --extra-experimental-features "nix-command" && sudo nix store optimise

echo "[*] Changing Repo Name to Nixos"
mv /home/dbochoa77/nixosConfiguration /home/dbochoa77/nixos

echo "[*] Moving hardware configuration"
sudo mv /etc/nixos/hardware-configuration.nix /home/dbochoa77/nixos/hosts/nixos/

echo "[*] Removing Nixos Legacy Location"
sudo rm -fr /etc/nixos

echo "[*] Updating Nixos Flake Channel..."
nix flake update 

echo "[*] Rebuilding NixOS system..."
sudo nixos-rebuild switch --flake .#nixos

echo "[*] Updating Home Manager configuration..."
home-manager switch --flake .#nixos

echo "[*] Creating .xinitrc..."
cat > "$XINITRC" <<EOF
#!/bin/sh

# Launch DWM
exec ~/.config/dwm/dwm

# Compositor
picom --config ~/.config/picom.conf &

# Set wallpaper 
feh --no-fehbg --bg-scale /home/dbochoa77/personal/Wallpapers/hannibalCrossingTheAlps.jpg &

EOF

chmod +x "$XINITRC"

echo "[*] .xinitrc created successfully."
echo "[*] Done! You can start your DWM session with 'startx'."

echo "[*] Removing Bootstrap.sh, Thank you !!"
rm ~/nixos/bootstrap.sh

===== ./flake.lock =====
{
  "nodes": {
    "agenix": {
      "inputs": {
        "darwin": "darwin",
        "home-manager": "home-manager",
        "nixpkgs": "nixpkgs",
        "systems": "systems"
      },
      "locked": {
        "lastModified": 1754433428,
        "narHash": "sha256-NA/FT2hVhKDftbHSwVnoRTFhes62+7dxZbxj5Gxvghs=",
        "owner": "ryantm",
        "repo": "agenix",
        "rev": "9edb1787864c4f59ae5074ad498b6272b3ec308d",
        "type": "github"
      },
      "original": {
        "owner": "ryantm",
        "repo": "agenix",
        "type": "github"
      }
    },
    "darwin": {
      "inputs": {
        "nixpkgs": [
          "agenix",
          "nixpkgs"
        ]
      },
      "locked": {
        "lastModified": 1744478979,
        "narHash": "sha256-dyN+teG9G82G+m+PX/aSAagkC+vUv0SgUw3XkPhQodQ=",
        "owner": "lnl7",
        "repo": "nix-darwin",
        "rev": "43975d782b418ebf4969e9ccba82466728c2851b",
        "type": "github"
      },
      "original": {
        "owner": "lnl7",
        "ref": "master",
        "repo": "nix-darwin",
        "type": "github"
      }
    },
    "disko": {
      "inputs": {
        "nixpkgs": [
          "nixpkgs"
        ]
      },
      "locked": {
        "lastModified": 1753140376,
        "narHash": "sha256-7lrVrE0jSvZHrxEzvnfHFE/Wkk9DDqb+mYCodI5uuB8=",
        "owner": "nix-community",
        "repo": "disko",
        "rev": "545aba02960caa78a31bd9a8709a0ad4b6320a5c",
        "type": "github"
      },
      "original": {
        "owner": "nix-community",
        "repo": "disko",
        "type": "github"
      }
    },
    "home-manager": {
      "inputs": {
        "nixpkgs": [
          "agenix",
          "nixpkgs"
        ]
      },
      "locked": {
        "lastModified": 1745494811,
        "narHash": "sha256-YZCh2o9Ua1n9uCvrvi5pRxtuVNml8X2a03qIFfRKpFs=",
        "owner": "nix-community",
        "repo": "home-manager",
        "rev": "abfad3d2958c9e6300a883bd443512c55dfeb1be",
        "type": "github"
      },
      "original": {
        "owner": "nix-community",
        "repo": "home-manager",
        "type": "github"
      }
    },
    "home-manager_2": {
      "inputs": {
        "nixpkgs": [
          "nixpkgs"
        ]
      },
      "locked": {
        "lastModified": 1754924470,
        "narHash": "sha256-asI/or9AcUMydwzodCgpHGytnMSNUlciw3uaycpXm4E=",
        "owner": "nix-community",
        "repo": "home-manager",
        "rev": "67393957c27b4e4c6c48a60108a201413ced7800",
        "type": "github"
      },
      "original": {
        "owner": "nix-community",
        "repo": "home-manager",
        "type": "github"
      }
    },
    "nixpkgs": {
      "locked": {
        "lastModified": 1754028485,
        "narHash": "sha256-IiiXB3BDTi6UqzAZcf2S797hWEPCRZOwyNThJIYhUfk=",
        "owner": "NixOS",
        "repo": "nixpkgs",
        "rev": "59e69648d345d6e8fef86158c555730fa12af9de",
        "type": "github"
      },
      "original": {
        "owner": "NixOS",
        "ref": "nixos-25.05",
        "repo": "nixpkgs",
        "type": "github"
      }
    },
    "nixpkgs-stable": {
      "locked": {
        "lastModified": 1735563628,
        "narHash": "sha256-OnSAY7XDSx7CtDoqNh8jwVwh4xNL/2HaJxGjryLWzX8=",
        "owner": "nixos",
        "repo": "nixpkgs",
        "rev": "b134951a4c9f3c995fd7be05f3243f8ecd65d798",
        "type": "github"
      },
      "original": {
        "owner": "nixos",
        "ref": "nixos-24.05",
        "repo": "nixpkgs",
        "type": "github"
      }
    },
    "nixpkgs_2": {
      "locked": {
        "lastModified": 1754725699,
        "narHash": "sha256-iAcj9T/Y+3DBy2J0N+yF9XQQQ8IEb5swLFzs23CdP88=",
        "owner": "nixos",
        "repo": "nixpkgs",
        "rev": "85dbfc7aaf52ecb755f87e577ddbe6dbbdbc1054",
        "type": "github"
      },
      "original": {
        "owner": "nixos",
        "ref": "nixos-unstable",
        "repo": "nixpkgs",
        "type": "github"
      }
    },
    "nvimDotfiles": {
      "flake": false,
      "locked": {
        "lastModified": 1752018499,
        "narHash": "sha256-UzDfqXYSskgF+YN+fN5x11PtKksBNtrSmgt6gKskDxE=",
        "ref": "refs/heads/main",
        "rev": "a7e4974e17d2633a3e788962f8ec385bd87c2d5f",
        "revCount": 3,
        "type": "git",
        "url": "https://github.com/dbochoa77/nvim.git"
      },
      "original": {
        "type": "git",
        "url": "https://github.com/dbochoa77/nvim.git"
      }
    },
    "root": {
      "inputs": {
        "agenix": "agenix",
        "disko": "disko",
        "home-manager": "home-manager_2",
        "nixpkgs": "nixpkgs_2",
        "nixpkgs-stable": "nixpkgs-stable",
        "nvimDotfiles": "nvimDotfiles",
        "secrets": "secrets"
      }
    },
    "secrets": {
      "flake": false,
      "locked": {
        "path": "./secrets",
        "type": "path"
      },
      "original": {
        "path": "./secrets",
        "type": "path"
      },
      "parent": []
    },
    "systems": {
      "locked": {
        "lastModified": 1681028828,
        "narHash": "sha256-Vy1rq5AaRuLzOxct8nz4T6wlgyUR7zLU309k9mBC768=",
        "owner": "nix-systems",
        "repo": "default",
        "rev": "da67096a3b9bf56a91d16901293e51ba5b49a27e",
        "type": "github"
      },
      "original": {
        "owner": "nix-systems",
        "repo": "default",
        "type": "github"
      }
    }
  },
  "root": "root",
  "version": 7
}

===== ./printAll.sh =====
#!/usr/bin/env bash

# Usage: ./printAll.sh /path/to/dir output.txt

TARGET_DIR="${1:-.}"             # Default to current directory if not provided
OUTPUT_FILE="${2:-allCode.txt}"     # Default output file name

# Clear or create output file
> "$OUTPUT_FILE"

# Add directory tree structure (ignoring .git)
echo "===== DIRECTORY STRUCTURE =====" >> "$OUTPUT_FILE"
tree -I ".git" "$TARGET_DIR" >> "$OUTPUT_FILE"
echo -e "\n===== FILE CONTENTS =====" >> "$OUTPUT_FILE"

# Loop through all files except inside .git and append content
find "$TARGET_DIR" -type f ! -path "*/.git/*" | while read -r file; do
    echo -e "\n===== $file =====" >> "$OUTPUT_FILE"
    cat "$file" >> "$OUTPUT_FILE"
done

echo "✅ All contents saved to $OUTPUT_FILE"


===== ./flake.nix =====
{
  description = "Configuration for Nixos Server";

inputs = {
    # Manages Dotfiles
    home-manager = {
      url = "github:nix-community/home-manager";
      inputs.nixpkgs.follows = "nixpkgs";
    };

    # Unstable Nixos 
    nixpkgs.url = "github:nixos/nixpkgs/nixos-unstable";

    # Stable Nixos
    nixpkgs-stable.url = "github:nixos/nixpkgs/nixos-24.05";

    # Declarative Partions
    disko = {
      url = "github:nix-community/disko";
      inputs.nixpkgs.follows = "nixpkgs";
    };

    # Encryption for Secrets
    agenix.url = "github:ryantm/agenix";
    secrets = { 
      url = "path:./secrets";
      flake = false;
    };
    
    # My Nvim Configuration
    nvimDotfiles = {
    url = "git+https://github.com/dbochoa77/nvim.git";
    flake = false;
    };
  };
 
    outputs = { self, agenix, disko, nvimDotfiles, home-manager, nixpkgs, ...} @ inputs: let
      inherit (self) outputs;
      systems = [ "x86_64-linux" "aarch64-linux" ];
      forAllSystems = nixpkgs.lib.genAttrs systems;  
    in {
    overlays = import ./overlays {inherit inputs;};

    nixosConfigurations = {
        nixos = nixpkgs.lib.nixosSystem {
	  specialArgs = {inherit inputs outputs;
	  user = "admin";
	  hostname = "nixos";
	  };

	  modules = [
	    ./hosts/nixos/default.nix
      	    inputs.disko.nixosModules.disko
	    agenix.nixosModules.default
	  ];
	};
      };

      homeConfigurations = { 
        "nixos" = home-manager.lib.homeManagerConfiguration {
	  pkgs = nixpkgs.legacyPackages."x86_64-linux";
	  extraSpecialArgs = {inherit inputs outputs;};
	  modules = [./home/nixos/admin.nix];
        };
      };
    };
}

===== ./pkgs/systemPackages/security/default.nix =====
{ pkgs }: with pkgs; [
    openssl
    nftables
]

===== ./pkgs/systemPackages/utilities/default.nix =====
{ pkgs }: with pkgs; [
  dmenu
  curl
  wget
  rsync
  st
  unzip
  zip
  zstd
  p7zip
  ntfs3g
  dosfstools
  exfatprogs
  util-linux
  brightnessctl
  htop
  rtkit
  timeshift
  udisks
]

===== ./pkgs/systemPackages/nixos-tools/default.nix =====
{ pkgs }: with pkgs; [
    home-manager
]

===== ./pkgs/systemPackages/developerTools/default.nix =====
{ pkgs }: with pkgs; [
    gcc
    nodejs
    curl
    wget
    unzip
    gnutar
    gzip
    cacert
    gnumake
    git 
    python3
    python3Packages.pip
    xclip 
    ninja
    gdb
    cmake
    pkg-config
]



===== ./pkgs/systemPackages/default.nix =====
{ pkgs }: 
( import ./developerTools { inherit pkgs; })
++
( import ./nixos-tools { inherit pkgs; })
++
( import ./security { inherit pkgs; })
++
( import ./utilities{ inherit pkgs; })

===== ./pkgs/default.nix =====
{ pkgs }:

{
  systemPackages = import ./systemPackages { inherit pkgs; };
  userPackages   = import ./userPackages { inherit pkgs; };
}



===== ./pkgs/userPackages/utilities/default.nix =====
{ pkgs }: with pkgs; [
    nano
    neovim
    vim
    sutils
    cowsay
    tree
]

===== ./pkgs/userPackages/default.nix =====
{ pkgs }:

(import ./terminal { inherit pkgs; })
++ 
(import ./utilities { inherit pkgs; })
++
(import ./homemanger {inherit pkgs; })

===== ./pkgs/userPackages/terminal/default.nix =====
{ pkgs }: with pkgs; [
    zsh
    fastfetch
]

===== ./pkgs/userPackages/homemanger/default.nix =====
{ pkgs }: with pkgs; [
    coreutils
    fd
    htop
    httpie
    jq
    procs
    ripgrep
    tldr
    zip
]

